X <- NULL
for (i in 1:n) {
X <- rbind(X, observed_networkslt[[i]])
}
xb <- X %*% beta_with_indices$beta
vxb <- var(X %*% beta_with_indices$beta)
noise <- (1-(r2 / r2))*vxb
y <- xb + rnorm(n,0,sqrt(noise))
rtrn <- list(outcomes = y, signal = beta_with_indices, ntworkslt = observed_networkslt,
p = p, n = n, full_ntwork = ntwrk, adjm = adjm, noise = noise)
#})
return(rtrn)
}
dat$noise
dat <- generate_network_data(50,10,0.7)
dat$noise
generate_network_data <- function(p,
n,
r2,
prop_zero = 0.8,
beta_mean = 5,
beta_sd = 0.01,
x_cor = 0.5,
x_sigma = 1,
beta_hubs = F,
hub_nodes = NULL,
hub_degrees = NULL){
#profvis({
## Create a random Adjacency Matrix that represents the network
q = p*(p-1)/2
if(!beta_hubs){
adjm <- matrix(NA,p,p)
true_signals <- matrix(sample(0:1,q , replace = T, prob = c(prop_zero,1-prop_zero)))
adjm[lower.tri(adjm)] <- true_signals
adjm[upper.tri(adjm)] <- t(adjm)[upper.tri(adjm)]
diag(adjm) <- 0
ntwrk <- igraph::graph_from_adjacency_matrix(adjm,
mode= "undirected")
} else {
if(is.null(hub_nodes | is.null(hub_degrees))){
error("Please specify nodes AND degress for the hubs")
}
hub_connects <- list()
if(p - length(hub_nodes) - sum(hub_degrees) < 2){
error("Pick a larger p - your hub and connections are greater than the number of nodes ")
}
num_nodes <- p
adjm <- matrix(0,nrow=num_nodes, ncol=num_nodes)
for(i in 1:length(hub_nodes)){
if(i == 1)
hub_connects[[i]] <- length(hub_nodes)+1:hub_degrees[1]
else
hub_connects[[i]] <- max(hub_connects[[i-1]]) + 1:hub_degrees[i]
adjm[hub_nodes[i],hub_connects[[i]]] <- 1
}
adjm <- t(adjm) + adjm
true_signals <-  adjm[lower.tri(adjm)]
diag(adjm) <- 0
ntwrk <- igraph::graph_from_adjacency_matrix(adjm,
mode="undirected")
}
i <- 2
j <- NULL # rows
k <- NULL # columns
while (i < p+1){
addonj <- i:p
addonk <- rep(i-1,p+1-i)
j <- c(j,addonj)
k <- c(k,addonk)
i <- i + 1
}
beta_with_indices = data.frame(signal = true_signals, j = j, k = k)
beta_with_indices$beta <- beta_with_indices$signal * rnorm(dim(beta_with_indices)[1],beta_mean, beta_sd)
#
#cov_mat <- diag(q)*x_sigma
cov_mat <- toeplitz(c(x_sigma, rep(x_cor,q-1)))
#cov_mat[upper.tri(cov_mat)] <- x_cor
#cov_mat[lower.tri(cov_mat)] <- x_cor
observed_networks <- list()
observed_networkslt <- list()
y <- NULL
x <- mvnfast::rmvn(n,rep(0,q), cov_mat, ncores = 2)
for (i in 1:n){
x_i <- x[i,]
ob_ntwrk <- matrix(NA,p,p)
ob_ntwrk[lower.tri(ob_ntwrk)] <- x_i
ob_ntwrk[upper.tri(ob_ntwrk)] <- t(ob_ntwrk)[upper.tri(ob_ntwrk)]
diag(ob_ntwrk) <- 0
observed_networkslt[[i]] <- ob_ntwrk[lower.tri(ob_ntwrk)] # make sure this matches indices!!
observed_networks[[i]] <- ob_ntwrk # make sure this matches indices!!
}
X <- NULL
for (i in 1:n) {
X <- rbind(X, observed_networkslt[[i]])
}
xb <- X %*% beta_with_indices$beta
vxb <- var(X %*% beta_with_indices$beta)
noise <- ((1-r2) / r2)*vxb
y <- xb + rnorm(n,0,sqrt(noise))
rtrn <- list(outcomes = y, signal = beta_with_indices, ntworkslt = observed_networkslt,
p = p, n = n, full_ntwork = ntwrk, adjm = adjm, noise = noise)
#})
return(rtrn)
}
dat <- generate_network_data(50,10,0.7)
dat$noise
dat$outcomes
dat <- generate_network_data(50,10,0.95)
dat$noise
X <- t(matrix(unlist(dat$ntworkslt), choose(dat$p,2), dat$n))
y <- dat$outcomes
mod_dat <- as.data.frame(cbind(y,X))
names(mod_dat) <- c("y", paste0("X",1:dim(X)[2]))
v
mod <- lm(y ~ ., dat = mod_dat)
summary(mod)
dat$p
dat$n
dat <- generate_network_data(15,1000,0.95)
X <- t(matrix(unlist(dat$ntworkslt), choose(dat$p,2), dat$n))
y <- dat$outcomes
dat$noise
names(mod_dat) <- c("y", paste0("X",1:dim(X)[2]))
mod_dat <- as.data.frame(cbind(y,X))
names(mod_dat) <- c("y", paste0("X",1:dim(X)[2]))
mod <- lm(y ~ ., dat = mod_dat)
summary(mod)
dat <- generate_network_data(15,1000,0.5)
dat$noise
X <- t(matrix(unlist(dat$ntworkslt), choose(dat$p,2), dat$n))
y <- dat$outcomes
mod_dat <- as.data.frame(cbind(y,X))
names(mod_dat) <- c("y", paste0("X",1:dim(X)[2]))
mod <- lm(y ~ ., dat = mod_dat)
summary(mod)
group_horseshoe_gibs <- function(burn_ins,
posterior_draws ,
dat = NULL,
p = 5,
n = 1000,
debug = F,
update = "all",
show = F,
show_params = F,
generate = T,
sigma2_beta = 2,
prop_zero = 0.8,
beta_mean = 5,
beta_sd = 0.01,
x_cor = 0.5,
x_sigma = 1,
init_beta = 0,
ungroup = F,
beta_hubs = F,
hub_nodes = NULL,
hub_degrees = NULL) {
if (!is.null(dat)) {
generate <- F
}
if (generate) {
dat <- generate_network_data(
p = p,
n = n,
sigma2_beta = sigma2_beta,
prop_zero = prop_zero,
beta_mean = beta_mean,
beta_sd = beta_sd,
x_cor = x_cor,
x_sigma = x_sigma,
beta_hubs = beta_hubs,
hub_nodes = hub_nodes,
hub_degrees = hub_degrees
)
}
if(all(dat$signal == 0)){
error("No Signal")
}
n <- dat$n
p <- dat$p
q = p * (p - 1) / 2
#system.time({
gam <-
data.frame(
gam_value = rep(1, p),
j = 1:p,
a_gam = 1,
k = 1:p
)
lambda <-
data.frame(
lam_value = rep(1, q),
j = dat$signal$j,
k = dat$signal$k,
a_lam = 1
)
sigma2 <- 1
betas <-
data.frame(
values  = rep(init_beta, q),
j = dat$signal$j,
k = dat$signal$k
)
if (debug) {
betas$values = dat$signal$beta
}
tau2 <- 1
iterations <- burn_ins + posterior_draws
it <- 0
beta_mat <- NULL
sigma_vec <- NULL
gam_j_vec <- NULL
gam_k_vec <- NULL
tau_vec <- NULL
lam_vec <-
X <- NULL
for (i in 1:n) {
X <- rbind(X, dat$ntworkslt[[i]])
}
XtX <- crossprod(X)
while (it < iterations + 1) {
### Updating Hyperparameters ####
if ("atau" %in% update | update == "all") {
# posterior of a_tau is invgamma(1,1 + 1/tau^2)
a_tau <- rinvgamma(1, 1, 1 + 1 / tau2)
if (show) {
print(a_tau)
}
}
if ("agam" %in% update | update == "all") {
# if(ungroup){
#   next
# }
for (node in 1:p) {
# posterior of a_gamma_j is invgamma(1, 1 + 1/gamma_j^2)
gam$a_gam[node] <- rinvgamma(1, 1, 1 + 1 / gam$gam_value[node])
if (ungroup) {
gam$a_gam[node] <- 1
}
}
}
if ("alam" %in% update | update == "all") {
for (node_pair in 1:q) {
# posterior of a_lam_jk is invgamma(1, 1 + 1/lambda_jk^2)
lambda$a_lam[node_pair] <-
rinvgamma(1, 1, 1 + 1 / lambda$lam_value[node_pair])
}
}
gam_k <-
gam %>% select(-j) %>% rename(gam_k_value = gam_value, a_k_gam = a_gam)
gam_j <-
gam %>% select(-k) %>% rename(gam_j_value = gam_value, a_j_gam = a_gam)
params <- lambda %>%
left_join(gam_k, b = "k") %>%
left_join(gam_j, by = "j") %>%
left_join(betas, by = c("j", "k")) %>%
rowwise() %>%
mutate(div_sum = values ^ 2 / (gam_j_value * gam_k_value * lam_value))
if (show_params) {
print(params)
}
if ("tau" %in% update | update == "all") {
# posterior of tau^2 is invgamma( (q + 1) / 2, 1 / a_tau + 1/2sigma^2 * sum(beta_jk^2 / lam_jk ^2 gam_j ^2 gam_k ^2))
tau2 <-
rinvgamma(1, (q + 1) / 2, 1 / a_tau + sum(params$div_sum) / (2 * sigma2))
if (show) {
print(tau2)
}
}
if ("gamma" %in% update | update == "all") {
for (node in 1:p) {
k_dat <- params %>% filter(k == node | j == node) %>%
rowwise() %>%
mutate(denom_piece  = ifelse(
j == node,
(values ^ 2) / (gam_k_value * lam_value) ,
values ^ 2 / (gam_j_value * lam_value)
))
a_k <-
gam %>% filter(k == node) %>% select(a_gam) %>% unlist()
m <- nrow(k_dat)
s <- sum(k_dat$denom_piece)
# posterior for gamma_k is invgamma(m_k + 1 / 2, 1/a_k + 1/2sigma^2tau^2)
gam$gam_value[gam$k == node] <-
rinvgamma(1, (m + 1) / 2, 1 / a_k + s / (2 * sigma2 * tau2))
if (ungroup) {
gam$gam_value[gam$k == node] <- 1
}
}
}
if ("lambda" %in% update | update == "all") {
lambda$lam_value <- rinvgamma(q,rep(1,q), 1 / params$a_lam + params$values ^ 2 / (
2 * (sigma2 * tau2 * params$gam_k_value * params$gam_j_value)))
}
gam_k <-
gam %>% select(-j) %>% rename(gam_k_value = gam_value, a_k_gam = a_gam)
gam_j <-
gam %>% select(-k) %>% rename(gam_j_value = gam_value, a_j_gam = a_gam)
params <- lambda %>%
left_join(gam_k, b = "k") %>%
left_join(gam_j, by = "j") %>%
left_join(betas, by = c("j", "k"))
# Updating Model Parameters ####
xb <- X %*% betas$values
LAMBDA_diag <-
params %>% rowwise() %>% mutate(diag_el = gam_k_value * gam_j_value * lam_value) %>% select(diag_el) %>% unlist()
lam <- diag(1, q)
diag(lam) <- LAMBDA_diag
inv_lam <- solve(tau2 * lam, tol = 1e-26)
err = dat$outcomes - xb
if ("sigma" %in% update | update == "all") {
sigma2 <-
rinvgamma(1,
(n + q) / 2,
t(err) %*% err / 2 + t(betas$values) %*% (inv_lam) %*% betas$values / 2)
if (show) {
print(sigma2)
}
}
A <- XtX + inv_lam
if ("betas" %in% update | update == "all") {
R <- chol(A)
#mu <- t(X)%*%dat$outcomes
mu <- crossprod(X,dat$outcomes)
#b <- solve(t(R))%*%mu
b <- backsolve(R,mu,transpose=TRUE)
z <- rnorm(q,0,sqrt(sigma2))
betas$values <- backsolve(R,z + b)
}
print(paste("iteration:", it))
if (it > burn_ins) {
beta_mat <- cbind(beta_mat, betas$values)
lam_vec <- cbind(lam_vec, params$lam_value)
gam_j_vec <- cbind(gam_j_vec, params$gam_j_value)
gam_k_vec <- cbind(gam_k_vec, params$gam_k_value)
tau_vec <- c(tau_vec, tau2)
sigma_vec <- c(sigma_vec, sigma2)
}
it <- it + 1
}
posterior_pe <- rowMeans(beta_mat)
posterior_se <- apply(beta_mat, 1, sd)
preds <- X %*% posterior_pe
#})
return(
list(
real_dat = dat,
posterior_draws_beta = beta_mat,
posterior_pe = posterior_pe,
posterior_se = posterior_se,
posterior_draws_lam = lam_vec,
posterior_draws_gam_j = gam_j_vec,
posterior_draws_gam_k = gam_k_vec,
posterior_draws_tau = tau_vec,
posterior_draws_sigma = sigma_vec,
predictions = preds,
burn_ins = burn_ins,
posterior_draws = posterior_draws
)
)
}
group_horseshoe_gibs(1250, 250, dat = dat)
rinvgamma <- function(n, a, b) {
return(1 / rgamma(n, a, b))
}
library(tidyverse)
group_horseshoe_gibs(1250, 250, dat = dat)
ghs <- group_horseshoe_gibs(1250, 250, dat = dat)
ghs$posterior_pe
which(dat$signal$signal == 1)
idx <- which(dat$signal$signal == 1)
ghs$posterior_pe[idx]
ghs$posterior_pe[-idx]
mean((dat$signal$beta -  ghs$posterior_pe)^2)
dat <- generate_network_data(15,1000,0.5, beta_hubs = T)
dat <- generate_network_data(15,1000,0.5, beta_hubs = T, hub_nodes = c(7), hub_degrees = c(5))
plot(dat$full_ntwork)
X <- t(matrix(unlist(dat$ntworkslt), choose(dat$p,2), dat$n))
y <- dat$outcomes
mod_dat <- as.data.frame(cbind(y,X))
names(mod_dat) <- c("y", paste0("X",1:dim(X)[2]))
mod <- lm(y ~ ., dat = mod_dat)
ghs <- group_horseshoe_gibs(1250, 250, dat = dat)
ghs_ug <- group_horseshoe_gibs(1250, 250, dat = dat, ungroup = T)
idx <- which(dat$signal$signal == 1)
ghs$posterior_pe[idx]
dat$noise
ghs_ug$posterior_pe[idx]
mean((ghs_ug$posterior_pe - dat$signal$beta^2))
mean((ghs_ug$posterior_pe - dat$signal$beta)^2)
mean((ghs$posterior_pe - dat$signal$beta)^2)
dat <- generate_network_data(25,1000,0.5, beta_hubs = T, hub_nodes = c(12), hub_degrees = c(5))
X <- t(matrix(unlist(dat$ntworkslt), choose(dat$p,2), dat$n))
y <- dat$outcomes
mod_dat <- as.data.frame(cbind(y,X))
names(mod_dat) <- c("y", paste0("X",1:dim(X)[2]))
mod <- lm(y ~ ., dat = mod_dat)
summary(mod)
ghs <- group_horseshoe_gibs(1250, 250, dat = dat)
ghs_ug <- group_horseshoe_gibs(1250, 250, dat = dat, ungroup = T)
2 ^ 4/2
ghs <- group_horseshoe_gibs(1250, 250, dat = dat)
ghs_ug <- group_horseshoe_gibs(1250, 250, dat = dat, ungroup = T)
mean((ghs$posterior_pe - dat$signal$beta)^2)
mean((ghs_ug$posterior_pe - dat$signal$beta)^2)
dat <- generate_network_data(10,10,0.5, beta_hubs = T, hub_nodes = c(4), hub_degrees = c(2))
plot(dat$full_ntwork)
ghs <- group_horseshoe_gibs(1250, 250, dat = dat)
ghs_ug <- group_horseshoe_gibs(1250, 250, dat = dat, ungroup = T)
mean((ghs_ug$posterior_pe - dat$signal$beta)^2)
mean((ghs$posterior_pe - dat$signal$beta)^2)
ghs$posterior_pe
ghs_ug$posterior_pe
source('~/Dropbox (University of Michigan)/Research/Dissertation Work/ScalarOnNetworkShrinkagePrior/generate_network_data.R', echo=TRUE)
source('~/Dropbox (University of Michigan)/Research/Dissertation Work/ScalarOnNetworkShrinkagePrior/posterior_computation.R', echo=TRUE)
dat <- generate_network_data(20,200, 0.5, beta_hubs = T, hub_nodes = c(5,14), hub_degrees = c(4,4))
plot(dat$full_ntwork)
ghs <- group_horseshoe_gibs(1250, 250, dat)
ughs <- group_horseshoe_gibs(1250, 250, dat, ungroup = T)
ughs$posterior_draws_lam
rowMeans(ughs$posterior_draws_lam)
signal <- dat$signal$signal == 1
signal
rowMeans(ughs$posterior_draws_lam)[signal]
rowMeans(ghs$posterior_draws_lam)[signal]
si dat$signal[signal]
dat$signal[signal]
dat$signal[signal,]
rowMeans(ghs$posterior_draws_gam_j)
rowMeans(ghs$posterior_draws_gam_j)[c(5,14)]
rowMeans(ughs$posterior_draws_gam_j)[c(5,14)]
rowMeans(ghs$posterior_draws_gam_j)[c(5,14)]
rowMeans(ghs$posterior_draws_gam_j)[-c(5,14)]
rowMeans(ghs$posterior_draws_gam_j) > 10
idx <- rowMeans(ghs$posterior_draws_gam_j) > 10
rowMeans(ghs$posterior_draws_gam_j)[idx]
which(idx)
rowMeans(ghs$posterior_draws_gam_k)
unique(rowMeans(ghs$posterior_draws_gam_k))
dat$signal
unique(rowMeans(ghs$posterior_draws_gam_k))[5,14]
unique(rowMeans(ghs$posterior_draws_gam_k))[c(5,14)]
unique(rowMeans(ghs$posterior_draws_gam_k))[-c(5,14)]
mean(ghs$posterior_draws_sigma)
mean(ughs$posterior_draws_sigma)
dat$noise
rowMeans(ghs$posterior_draws_beta)
rowMeans(ghs$posterior_draws_beta)[idx]
rowMeans(ughs$posterior_draws_beta)[idx]
rowMeans(ghs$posterior_draws_beta)[signal]
signal
rowMeans(ughs$posterior_draws_beta)[signal]
dat$signal$signal == 1
idx <- dat$signal$signal == 1
rowMeans(ughs$posterior_draws_beta)[idx]
rowMeans(uhs$posterior_draws_beta)[idx]
hist(rowMeans(uhs$posterior_draws_beta))
hist(rowMeans(ghs$posterior_draws_beta))
ghs$posterior_draws_beta
dat <- generate_network_data(20,500, 0.7, beta_hubs = T, hub_nodes = c(5,14), hub_degrees = c(5,4))
ghs <- group_horseshoe_gibs(1250, 250, dat)
ughs <- group_horseshoe_gibs(1250, 250, ungroup = T)
dat$signal$signal == 1 -> idx
ix
idx
rowMeans(ghs$posterior_draws_beta)[idx]
ughs <- group_horseshoe_gibs(1250, 250, dat, ungroup = T)
rowMeans(ughs$posterior_draws_beta)[idx]
rowMeans(ughs$posterior_draws_lam)[idx]
rowMeans(ughs$posterior_draws_lam)[-idx]
mean(rowMeans(ughs$posterior_draws_lam)[-idx])
mean(rowMeans(ughs$posterior_draws_lam)[idx])
mean(rowMeans(ghs$posterior_draws_lam)[-idx])
mean(rowMeans(ghs$posterior_draws_lam)[idx])
mean(rowMeans(ghs$posterior_draws_lam)[c(5,18)])
mean(rowMeans(ghs$posterior_draws_lam)[c(5,14)])
plot(dat$full_ntwork)
mean(rowMeans(ghs$posterior_draws_gam_k)[c(5,14)])
mean(unique(rowMeans(ghs$posterior_draws_gam_k))[c(5,14)])
mean(unique(rowMeans(ghs$posterior_draws_gam_k))[-c(5,14)])
mean(ghs$posterior_draws_gam_k[c(5,14),])
dat <- generate_network_data(20,500, 0.7, beta_hubs = T, hub_nodes = c(5,14), hub_degrees = c(5,4), beta_mean = 1, beta_sd = 0.5)
dat_small_beta <- dat
dat <- generate_network_data(20,500, 0.7, beta_hubs = T, hub_nodes = c(5,14), hub_degrees = c(5,4))
ghs_small_beta <- group_horseshoe_gibs(1250, 250, dat_small_beta)
ughs_small_beta <- group_horseshoe_gibs(1250, 250, dat_small_beta, ungroup = T)
dat_small_beta$signal$signal ==1
dat_small_beta$signal$signal ==1 -> idx
ghs_small_beta$posterior_pe[idx]
ughs_small_beta$posterior_pe[idx]
dat_small_beta$signal$beta[idx]
dat_small_beta$signal$beta[-idx]
dat_small_beta$signal$beta[!idx]
mean((ghs_small_beta$posterior_pe[idx] -  dat_small_beta$signal$beta[idx])^2)
mean((ughs_small_beta$posterior_pe[idx] -  dat_small_beta$signal$beta[idx])^2)
mean((ughs_small_beta$posterior_pe[!idx] -  dat_small_beta$signal$beta[!idx])^2)
mean((ghs_small_beta$posterior_pe[!idx] -  dat_small_beta$signal$beta[!idx])^2)
mean((ghs_small_beta$posterior_pe -  dat_small_beta$signal$beta)^2)
mean((ughs_small_beta$posterior_pe -  dat_small_beta$signal$beta)^2)
dat <- generate_network_data(20,500, 0.5, beta_hubs = T, hub_nodes = c(5,14), hub_degrees = c(5,4))
dat_small_beta <- generate_network_data(20,500, 0.7, beta_hubs = T, hub_nodes = c(5,14), hub_degrees = c(5,4), beta_mean = 1, beta_sd = 0.5)
dat_small_beta <- generate_network_data(20,500, 0.5, beta_hubs = T, hub_nodes = c(5,14), hub_degrees = c(5,4), beta_mean = 1, beta_sd = 0.5)
ghs_small_beta <- group_horseshoe_gibs(1250, 250, dat_small_beta)
ughs_small_beta <- group_horseshoe_gibs(1250, 250, dat_small_beta, ungroup = T)
dat_small_beta$signal$signal ==1
dat_small_beta$signal$signal ==1 -> idx
mean((ughs_small_beta$posterior_pe -  dat_small_beta$signal$beta)^2)
mean((gghs_small_beta$posterior_pe -  dat_small_beta$signal$beta)^2)
mean((ghs_small_beta$posterior_pe -  dat_small_beta$signal$beta)^2)
mean((ghs_small_beta$posterior_pe[idx] -  dat_small_beta$signal$beta[idx])^2)
mean((ughs_small_beta$posterior_pe[idx] -  dat_small_beta$signal$beta[idx])^2)
mean((ughs_small_beta$posterior_pe[!idx] -  dat_small_beta$signal$beta[!idx])^2)
mean((ghs_small_beta$posterior_pe[!idx] -  dat_small_beta$signal$beta[!idx])^2)
